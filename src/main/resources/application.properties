server.port=8500

# Database
spring.datasource.url=jdbc:h2:mem:author
spring.datasource.username=sa
spring.datasource.password=password
spring.h2.console.enabled=true
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.jpa.database=h2
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create-drop

spring.jpa.defer-datasource-initialization=true

#h2
spring.h2.console.path=/h2-console
spring.h2.console.settings.trace=false
spring.h2.console.settings.web-allow-others=true

#Link to h2 console = http://localhost:<Port>/h2-console

# Hibernate
hibernate.dialect= org.hibernate.dialect.H2Dialect
hibernate.show_sql= true
hibernate.hbm2ddl.auto= update

#Swaggger
spring.mvc.pathmatch.matching-strategy=ant_path_matcher

# UI link to swagger API documentation: http://localhost:<PORT>/swagger-ui/#

# Docker build and push to repo
# docker build --tag=author-server:<Tag> .
# docker tag author-server:latest <Repo username or URL>/author-server:<Tag>>
# docker push  <Repo username or URL>/author-server:<Tag>


# Kubernetes or Openshift deployment
# Kubernetes create secret for private repository and use the  "imagePullSecrets:" to link the secret login file
# oc create secret docker-registry <SECRET-NAME> \
#      --docker-username=<USERNAME> \
#      --docker-server=docker.io \
#      --docker-email=<EMAIL> \
#      --docker-password=<PASSWORD>

# oc apply -f author-server.yaml
# oc get all
# oc get services
# oc get pod pod-name -o wide
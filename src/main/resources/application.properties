server.port=9000

# Database
spring.datasource.url=jdbc:h2:mem:author
spring.datasource.username=sa
spring.datasource.password=password
spring.h2.console.enabled=true
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.jpa.database=h2
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.defer-datasource-initialization=true

################## h2 ############################
spring.h2.console.path=/h2-console
spring.h2.console.settings.trace=false
spring.h2.console.settings.web-allow-others=true

#Link to h2 console = http://localhost:<Port>/h2-console

################# Hibernate #######################
hibernate.dialect= org.hibernate.dialect.H2Dialect
hibernate.show_sql= true
hibernate.hbm2ddl.auto= update


################# Swaggger ########################
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method

#UI link to swagger API documentation: http://server:port/context-path/swagger-ui.html or http://server:port/context-path/v3/api-docs


################ Docker build and push to repo  ##################
# docker build --tag=author-server:<Tag> .
# docker tag author-server:latest <Repo username or URL>/author-server:<Tag>>
# docker push  <Repo username or URL>/author-server:<Tag>


################ Prometheus ############################
management.endpoints.web.exposure.include=prometheus
management.metrics.tags.application=${spring.application.name}
#management.endpoints.shutdown.enable=true
#management.endpoints.web.exposure.include=health,info,prometheus


################ Kubernetes or Openshift deployment ##########################
# Kubernetes create secret for private repository and use the  "imagePullSecrets:" to link the secret login file
# oc create secret docker-registry <SECRET-NAME> \
#      --docker-username=<USERNAME> \
#      --docker-server=docker.io \
#      --docker-email=<EMAIL> \
#      --docker-password=<PASSWORD>

# oc apply -f author-server.yaml
# oc get all
# oc get services
# oc get pod pod-name -o wide
# Copy log from pod to local machine: kubectl exec  <pod-name> -i -t -- cat -t <file path> > <Destination>


######################## Skywalking ##########################
#SW_AGENT_FORCE_TLS=true
## The service name in UI
#agent.service_name=${SW_AGENT_NAME:author-server}
#
## Backend service addresses.
#collector.backend_service=${SW_AGENT_COLLECTOR_BACKEND_SERVICES:127.0.0.1:11800}

